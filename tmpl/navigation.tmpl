<?js
var self = this;
var canStyleAsNamespace = function(item) {
    return item.type === 'namespace' || item.type === 'module';
};
?>
<div class="search">
    <input id="search" type="text" class="form-control input-md" placeholder="Search...">
    <script type="text/javascript">
        (() =>
        {
            document
                .getElementById("search")
                .addEventListener("keyup", (event) =>
                {
                    const value = event.currentTarget.value.trim();

                    document
                        .getElementById("sub-navbar")
                        .classList.remove("searching");

                    if (value) {

                        const element = document.getElementById("sub-navbar");

                        element.classList.add("searching");

                        const items = document
                            .getElementsByClassName("parent");

                        const regexp = new RegExp(value, "i");

                        // reset
                        for (let idx = 0; idx < items.length; ++idx) {
                            const item = items[idx];
                            item.classList.remove("match", "no-match");

                            let parent = items[idx].parentNode;
                            parent.classList.remove("match", "no-match");

                             parent
                                .parentNode
                                .classList.remove("match", "no-match");
                        }

                        for (let idx = 0; idx < items.length; ++idx) {

                            const item = items[idx];

                            let parent = item.parentNode;
                            if (!item.dataset.name || !regexp.test(item.dataset.name)) {

                                if (!parent.classList.contains("match")) {
                                    parent.classList.add("no-match");
                                }

                                parent = parent.parentNode;
                                if (!parent.classList.contains("match")) {
                                    parent.classList.add("no-match");
                                }

                                item.classList.add("no-match");

                            } else {

                                parent.classList.remove("no-match");
                                parent.classList.add("match");

                                parent = parent.parentNode;
                                parent.classList.remove("no-match");
                                parent.classList.add("match");

                                item.classList.add("match");

                            }
                        }
                    }
                });
        })();
    </script>
</div>
<nav id="sub-navbar" class="sub-navbar">
    <ul class="list-unstyled">

    <?js function process(item) { ?>
        <li class="docs-item">
            <span class="title <?js if (canStyleAsNamespace(item)) { ?>namespace<?js } ?> <?js if (item.deprecated) { ?>status-deprecated<?js } ?>">
                <?js if (canStyleAsNamespace(item)) { ?>
                <span class="namespaceTag">
                    <span class="glyphicon glyphicon-<?js= (item.longname === 'global') ? 'globe' : 'folder-open' ?>"></span>
                </span>
                <?js } ?>
                <?js if (item.type === 'module') { ?>
                    <?js= self.linkto(item.longname, item.name) ?>
                <?js } else if (item.type === 'tutorial') { ?>
                    <span class="namespaceTag"><span class="glyphicon glyphicon-education"></span></span>
                    <?js= self.tutoriallink(item.longname) ?>
                <?js } else { ?>
                    <?js= self.linkto(item.longname, item.longname === 'global' ? 'Global' : item.longname) ?>
                <?js } ?>
            </span>
            <?js
            if (item.members) {
            ?>
            <ul class="members itemMembers">
            <?js
            if (item.members.length) {
            ?>
            <span class="subtitle">Members</span>
            <?js
                item.members.forEach(function (v) {
            ?>
                <li class="<?js if (!v.inherited && !v.inherits) { ?>parent<?js } ?> <?js if (v.deprecated) { ?>status-deprecated<?js } ?>" data-name="<?js= v.longname ?>"><?js= self.linkto(v.longname, v.name) ?></li>
            <?js
                });
            }
            ?>
            </ul>
            <?js
            }
            if (item.typedefs) {
            ?>
            <ul class="typedefs itemMembers">
            <?js
            if (item.typedefs.length) {
            ?>
            <span class="subtitle">Typedefs</span>
            <?js
                item.typedefs.forEach(function (v) {
            ?>
                <li class="parent" data-name="<?js= v.longname ?>"><?js= self.linkto(v.longname, v.name) ?></li>
            <?js
                });
            }
            ?>
            </ul>
            <?js
            }
            if (item.interfaces) {
            ?>
            <ul class="typedefs itemMembers">
            <?js
            if (item.interfaces.length) {
            ?>
            <span class="subtitle">Interfaces</span>
            <?js
                item.interfaces.forEach(function (v) {
            ?>
                <li class="parent" data-name="<?js= v.longname ?>"><?js= self.linkto(v.longname, v.name) ?></li>
            <?js
                });
            }
            ?>
            </ul>
            <?js
            }
            if (item.methods) {
            ?>
            <ul class="methods itemMembers">
            <?js
            if (item.methods.length) {
            ?>
            <span class="subtitle">Methods</span>
            <?js

                item.methods.forEach(function (v) {
            ?>
                <li class="<?js if (!v.inherited && !v.inherits) { ?>parent<?js } ?>  <?js if (v.deprecated) { ?>status-deprecated<?js } ?>" data-name="<?js= v.longname ?>"><?js= self.linkto(v.longname, v.name) ?></li>
            <?js
                });
            }
            ?>
            </ul>
            <?js
            }
            if (item.events) {
            ?>
            <ul class="events itemMembers">
            <?js
            if (item.events.length) {
            ?>
            <span class="subtitle">Events</span>
            <?js
                item.events.forEach(function (v) {
            ?>
                <li class="<?js if (!v.inherited && !v.inherits) { ?>parent<?js } ?>" data-name="<?js= v.longname ?>"><?js= self.linkto(v.longname, v.name) ?></li>
            <?js
                });
            }
            ?>
            </ul>
            <?js
            }
            if (item.children) {
            ?>
            <ul class="children itemMembers">
            <?js
            if (item.children.length) {
            ?>
            <span class="subtitle"></span>
            <?js
                item.children.forEach(function (v) {
                    process(v);
                });
            }
            ?>
            </ul>
            <?js
            }
            ?>
        </li>
    <?js }; ?>
    <?js
    this.nav.forEach(process);
    ?>
    </ul>
    <i class="bi bi-list mobile-sub-nav-toggle"></i>
</nav>
